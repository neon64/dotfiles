#!/bin/bash

termwidth=80
BLUE="\e[34m"
RED="\e[31m"
YELLOW="\e[33m"
GREEN="\e[32m"
BOLD="\e[1m"
RESET_FMT="\e[0m"

function header {
	echo -e "${BOLD}====> ${BLUE}$1${RESET_FMT}"
}

function section {
    echo ""
    padding="$(printf '%0.1s' -{1..500})"
    printf "%*.*s ${BOLD}%s${RESET_FMT} %*.*s\n" 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
    echo ""
}

function warn {
	echo -e "${BOLD}   -> ${YELLOW}$1${RESET_FMT}"
}

function confirm {
    echo -en "${BOLD}====> ${GREEN}$1${RESET_FMT}"
    while true; do
        read -n1 -p " (y/n/e) " yn </dev/tty
        case $yn in
            [Yy]* ) echo "" && return 0;;
            [Nn]* ) echo "" && return 1;;
            [Ee]* ) echo "" && warn "user aborted script, exiting..." && exit 1;;
            * ) echo -e "\nPlease answer yes or no.";;
        esac
    done
}

function center() {
    padding="$(printf '%0.1s' ={1..500})"
    printf "%*.*s ${GREEN}%s${RESET_FMT} %*.*s\n" 0 "$(((termwidth-2-${#1})/2))" "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

function entry_point() {
    echo ""
    center "NEON64's DOTFILES"
    echo ""
    echo -e "If anything goes wrong, you usually should be safe to rerun\nthis command and it will try everything again.\nBut also note this isn't designed to cover every single edge case,\nso please don't run this unless you have read through the script\nand understand what you're doing. Good luck!"


    section "PRE-INSTALLATION CHECKS"
    echo -e "These dotfiles work best when installed as a normal, non-root user.\nSo we'll do a quick check to make sure the current user isn't root,\nas well as a few other sanity checks."
    echo ""

    if [ `whoami` = "root" ]; then
        header "You are currently logged in as 'root'. Aborting."
        exit 1
    else
        header "Dotfiles will be installed for user '`whoami`'."
        username=`whoami`
    fi

    other_homedir=$( getent passwd "$username" | cut -d: -f6 )
    if [ "$other_homedir" = "" ]; then
        warn "The home directory for this user shouldn't be empty. Perhaps the user doesn't exist?"
        exit 1
    fi
    header "Checked home-dir exists"

    ping -q -w 1 -c 1 "github.com" > /dev/null
    if [ $? -ne 0 ]; then
        warn "no internet connection - installation will fail"
        exit 1
    fi
    header "Checked connection to github.com"

    if ! which git > /dev/null; then
        warn "git not found - installation will fail"
        exit 1
    fi
    header "Checked git is installed"

    echo ""
    confirm "Would you like to install the dotfiles" || exit 1
    echo ""

    section "INSTALL DOTFILES"

    echo -e "Here we perform the bare minimum work to get the dotfiles repo onto this machine.\nIf you have already installed all the applications/tools which these dotfiles\nfunction with, or prefer to have a more manual install, then after running\nstep two you can exit the script and install apps & perform misc setup yourself."
    echo ""

    header "Installing dotfiles for user '$username'"

    step_three=$(section "STEP THREE: RUN SETUP SCRIPT")
    step_four=$(section "STEP FOUR - PROFIT")

    read -d '' commands <<EOF
BLUE="\\\e[34m"
RED="\\\e[31m"
YELLOW="\\\e[33m"
GREEN="\\\e[32m"
BOLD="\\\e[1m"
RESET_FMT="\\\e[0m"
install_location=".local/share/dotfiles"
setup_script=".local/bin/dotf_setup"
dotfiles_url="https://github.com/neon64/dotfiles"
shopt -s expand_aliases
echo -e "\${BOLD}   -> \${RESET_FMT}Now running as '\`whoami\`'\${RESET_FMT}"
cd ~
echo -e "\${BOLD}   -> \${RESET_FMT}Now at '\`pwd\`'\${RESET_FMT}"
echo -e "\${BOLD}====> \${BLUE}Creating 'dotf' alias\${RESET_FMT}"
alias dotf='/usr/bin/git --git-dir="\$install_location" --work-tree=\$HOME' && echo -e "\${BOLD}   ->\${RESET_FMT} Done"
echo -e "$\{BOLD}====> \${BLUE}Adding \$install_location to '.gitignore'\${RESET_FMT}"
if cat ~/.gitignore | grep -qi "\$install_location"; then
   echo -e "\${BOLD}   ->\${RESET_FMT} Already in .gitignore"
else
   echo "\$install_location" >> ~/.gitignore
fi
echo -e "\${BOLD}====> \${BLUE}Cloning dotfiles repository...\${RESET_FMT}"
git clone --bare --branch master "\$dotfiles_url" "\$install_location"
status=\$?
if [ \$status -ne 0 ]; then
    echo -e "\${BOLD}   -> \${YELLOW}clone of repository failed with exit code \$status\${RESET_FMT}"
fi
echo -e "\${BOLD}====> \${BLUE}Attempting to checkout dotfiles repository \${RESET_FMT}"
dotf checkout master && dotf submodule update --init --recursive
if dotf diff-index --quiet HEAD; then
    echo -e "\${BOLD}====> \${GREEN}Dotfiles repository checked out successfully\${RESET_FMT}"
else
    echo -e "\${BOLD}   -> \${YELLOW}error checking out the dotfiles\${RESET_FMT}"
fi

# run the next installation step
if [[ -x \$setup_script ]]; then
    \$setup_script </dev/tty
    status=\$?
    if [ \$status -ne 0 ]; then
       exit \$status
    fi
    echo -e "$step_four\\\n"
    echo -e "Awesome, the dotfiles were installed. Try logging back in again for changes to take effect."
    exit 0
else
    echo -e "\${BOLD}====> \${RED}Fatal error, install script ~/.local/bin/dotf_setup not executable.\${RESET_FMT}"
    echo -e "\${BOLD}   -> \${RESET_FMT}Check that the dotfiles were successfully downloaded and the repository checked out successfully."
    echo -e ""
    echo "Aborting script..."
    exit 1
fi
EOF

    if [ `whoami` = "root" ]; then
        # if we're in the root account, we need to switch to the desired user account
        # to complete the installation safely
        sudo -u $username bash -c "$commands"
    else
        bash -c "$commands"
    fi

    status=$?
    if [ $status -ne 0 ]; then
        exit $status
    fi
}

entry_point
