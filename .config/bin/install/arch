#!/bin/bash

# load the platform-independent definitions & functions
source "`dirname $0`/definitions"
# load the platform-independent installation steps
source "`dirname $0`/common"

function enable_locales {
    # set locale properly
    sudo sed -i '/en_AU.UTF-8 UTF-8/s/^#//' /etc/locale.gen
    sudo sed -i '/en_US.UTF-8 UTF-8/s/^#//' /etc/locale.gen
    header "Generating locales"
    sudo locale-gen
}


function add_colors_to_pacman {
    sudo sed -i 's/^#Color/Color/g' /etc/pacman.conf
}

if $FRESH_INSTALL; then
    confirm "Enable en_AU.UTF-8, en_US.UTF-8 locales?" && enable_locales
    confirm "Enable colored output in \`pacman\` and \`yay\`?" && add_colors_to_pacman

    echo ""

    if pacman -Q | grep -q 'yay'; then
        warn "\`yay\` already installed, using it to install everything else"
    else
        header "Installing \`yay\`"
        # first we want install an AUR helper, so we can install more packages more easily
        mkdir -p $PKG_BUILD_DIR
        cd $PKG_BUILD_DIR
        git clone https://aur.archlinux.org/yay.git || warn "Already cloned"
        cd yay
        makepkg -si

        header "Using \`yay\` to install everything else"
    fi

    cd ~
fi

# packages which weren't installed as part of base, but are nevertheless important for system functions
extra_system_pkgs=(
    polkit # required for shutdown without sudo, avoiding errors in systemctl etc...
    netctl # internet access
    pulseaudio pulseaudio-alsa # pulseaudio support
    libsecret # credential management
)

# installs the fish shell and everything else required to work with these dotfiles
base_shell_pkgs=(
    fish # shell of choice
    neovim # text editor - either use because its awesome, or as console backup
    newsboat # required for reading Arch RSS feed before updating packages
    tmux # terminal multiplexer, provides multiple concurrent panes whilst running system updates using the `up` script
    exa # file listing in Rust
    git # version control
)

# installs the sway window manager and other utilites used by my particular configuration
wm_pkgs=(
    sway # window manager
    swayidle # lockscreen + power management
    waybar # awesome looking status bar
    grim # grab images from the wayland compositor
    rofi # app launcher
    slurp # select area to screenshot
    cantarell-fonts # chosen UI font for sway and waybar
    otf-font-awesome # chosen icon font for waybar
    swaylock-blur-git # cool util which blurs background for swaylock
    acpilight # provides an `xbacklight` replacement for wayland, used in sway config
    alsa-utils # provides an `amixer` command used for volume control
)

# installs packages required for emacs
emacs_pkgs=(
    emacs ttf-nanum adobe-source-code-pro-fonts # emacs + fonts required for it
)

# installs packages to play music on the command-line
music_pkgs=(
    mpd # music player daemon
    mpc # command line client to mpd
    mpv # play music and videos in the command line
    ncmpcpp # music player terminal client
    cava # audio visualiser
)

# extra miscellaneous utils which aren't integral to these dotfiles, but are nevertheless useful
extra_shell_pkgs=(
    lostfiles # search for stray system files which aren't part of a package
    trash-cli # `trash` command
    googler # google from the command line
    xdg-utils # xdg-open and other utils
    archey3 # display system info
)

# apps which I use
recommended_apps=(
    alacritty # nice terminal emulator written in rust
    otf-fira-code # nice coding font with ligatures
    otf-fira-mono # nice coding font without ligatures
    firefox # browser of choice
    ttf-liberation # sans-serif font for firefox
    code # VS Code editor
    gnome-system-monitor #  visual htop
    gnome-font-viewer # viewing which fonts are available
    pavucontrol # visual pulse audio info
    nautilus # file manager
)

# packages to write rust code
rust_pkgs=(
    rustup # manage rust installations
)

# packages to write/run node code
node_pkgs=(
    nodejs npm
)

# packages to write/run python code
python_pkgs=(
    python
    python-pip
)

function install_group {
    name=$1
    shift
    confirm " - \`$name\`?" && yay -S --needed "$@"
}

function install_custom_mpsyt {
    yay -S --needed python-mpd2
    pip3 install --user -U git+https://github.com/vn-ki/mps-youtube.git@mpd
}

function install_pkgs {
    install_group extra_system_pkgs "${extra_system_pkgs[@]}"
    install_group base_shell_pkgs "${base_shell_pkgs[@]}"
    install_group wm_pkgs ${wm_pkgs[@]}
    install_group extra_shell_pkgs ${extra_shell_pkgs[@]}
    install_group emacs_pkgs ${emacs_pkgs[@]}
    install_group music_pkgs ${music_pkgs[@]}
    install_group recommended_apps ${recommended_apps[@]}
    install_group rust_pkgs ${rust_pkgs[@]} && rustup install stable && rustup install nightly && rustup default nightly && cargo install cargo-add
    install_group node_pkgs ${node_pkgs[@]}
    install_group python_pkgs ${python_pkgs[@]} 
    confirm " - custom version of mps-youtube which interacts nicely with mpd (requires python)?" && install_custom_mpsyt
    header "Installed all requested packages!"
}

function update_pkgs {
    newsboat -r
    yay -Syu
}

if $FRESH_INSTALL; then
    echo ""
    confirm "Install Arch packages?" && install_pkgs
    echo ""
else
    echo ""
    confirm "Update Arch packages?" && update_pkgs
    echo ""
fi

function theme_gnome_term {  
    git clone https://github.com/aaron-williamson/base16-gnome-terminal.git ~/.config/base16-gnome-terminal || warn "Already cloned repository"
    ~/.config/base16-gnome-terminal/color-scripts/base16-tomorrow-night.sh
    warn "You will need to set this theme as default in Gnome Terminal's preferences"
}

if $FRESH_INSTALL; then
    confirm "Add \`base16-tomorrow-night\` theme to Gnome Terminal (warning will add twice)?" && theme_gnome_term 

    confirm "Enable network time synchronization?" && sudo timedatectl set-ntp true
fi

install_common

echo ""
echo ""

if $FRESH_INSTALL; then
    header "Congratulations, installation completed!"
else
    header "System updated successfully"
fi

exit 0
