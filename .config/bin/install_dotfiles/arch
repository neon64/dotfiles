#!/bin/bash

# installs the fish shell and everything else required to work with these dotfiles
base_shell_pkgs=(
    fish # shell of choice
    neovim # text editor - either use because its awesome, or as console backup
    tmux # terminal multiplexer, provides multiple concurrent panes whilst running system updates using the `up` script
    exa # file listing in Rust
    ttf-nerd-fonts-symbols # fonts for exa
    bat # cat clone with extras (also just happens to be written in Rust)
    git-delta-git # diffing
    git # version control
    fzf # fuzzy file finder
    fd # nice alternative to `find`, written in Rust, and used in our fzf config
)

# installs the sway window manager and other utilites used by my particular configuration
wm_pkgs=(
    sway # window manager
    xorg-server-xwayland # things are very buggy, basically no apps work without this
    swayidle # lockscreen + power management
    waybar # awesome looking status bar
    grim # grab images from the wayland compositor
    rofi # app launcher
    slurp # select area to screenshot
    mako # notification daemon
    swayshot # screenshot wrapper
    ttf-input # chosen UI font for sway and waybar
    ttf-line-awesome # chosen icon font for waybar - open-source version of FontAwesome with thinner icons
    swaylock-blur-git # cool util which blurs background for swaylock
    brillo # provides an `xbacklight` replacement for wayland, used in sway config
    alsa-utils # provides an `amixer` command used for volume control
    evscript-git # map caps lock to escape on tap + more
    wl-clipboard # clipboard tools
    libinput-gestures # swipe actions for trackpads
    wdisplays-git # configure displays
    adwaita-qt # nice theme
    wob # wayland overlay bar - for volume and brightness control
    playerctl # control music
    nautilus-open-any-terminal # open in terminal - bound to Ctrl+E
    kanshi # output management
)

# installs packages required for emacs
emacs_pkgs=(
    emacs ttf-nanum adobe-source-code-pro-fonts # emacs + fonts required for it
    mlocate
    otf-fira-code-symbol # my own package for the fira code symbol font - a hack to make ligatures work in emacs
)

# installs packages to play music on the command-line
music_pkgs=(
    # mpd # music player daemon
    # mpc # command line client to mpd
    mpv # play music and videos in the command line
    # ncmpcpp # music player terminal client
    cava # audio visualiser
    youtube-dl # `ytdl` command
)

# extra miscellaneous utils which aren't integral to these dotfiles, but are nevertheless useful
extra_shell_pkgs=(
    lostfiles # search for stray system files which aren't part of a package
    trash-cli # `trash` command
    googler # google from the command line
    xdg-utils # xdg-open and other utils
    neofetch # display system info
    htop # system monitoring
    gotop # fancier system monitoring
    ttf-ubraille # font for gotop
    noto-fonts # provides special unicode char for pure fish prompt
    gnome-keyring # provider for libsecret - allows us to store git credentials for the command line
    hwinfo # useful for debugging info like framebuffer resolutions
    reptyr # attach background process to a terminal
    topgrade # upgrade everything at once
)

# apps which I use
recommended_apps=(
    alacritty-ligatures # nice terminal emulator written in rust
    ttf-input # terminal font
    ttf-jetbrains-mono # nice coding font with ligatures
    firefox # browser of choice
    ttf-liberation # sans-serif font for firefox
    code # VS Code editor
    typora # text editor
    pavucontrol # visual pulse audio info
    keepassxc # password manager
    qt5-wayland # makes keepassxc work in Gnome
    zathura zathura-pdf-mupdf # pdf viewer
    spotify # spotify client
    spotifywm-git # fixes the WM_CLASS of the spotify window
    spotify-tui # terminal spotify client
)

# while it is possible to do withut these Gnome apps, I find they make my life so much
# easier when I just need a GUI for once
gnome_apps=(
    gnome-system-monitor #  visual htop
    gnome-font-viewer # viewing which fonts are available
    gnome-calculator # basic calculator
    evince # gnome pdf reader
    eog # gnome image viewer
    nautilus # file manager
    gnome-clocks # alarm clocks etc...
    gnome-power-manager # power graphs etc..
    baobab # disk usage analyzer
)

# packages to write rust code
rust_pkgs=(
    rustup # manage rust installations
)

# packages to write/run node code
node_pkgs=(
    nodejs npm
)

# packages to write/run python code
python_pkgs=(
    python
    python-pip
)

# legacy X window system support
xorg_pkgs=(
    xorg-server
    xorg-xinit
    xorg-xprop
    xorg-xev
)

# VirtualBox
virtualbox_guest_pkgs=(
    virtualbox-guest-utils
)

# Bluetooth support
bluetooth_pkgs=(
    bluez # core bluetooth stack
    bluez-utils # provides bluetoothctl
    blueman # GTK+ bluetooth manager
    pulseaudio-bluetooth # use bluetooth audio devices
)

printing_pkgs=(
    cups cups-pdf # printing support
    cups-browsed
    avahi # printers on a network?
    system-config-printer
)

gtk_theme=(
    gnome-tweak-tool # change themes
    arc-gtk-theme # gtk theme
    arc-icon-theme # icon theme
)

mail_pkgs=(
    notmuch # email database
    gmailieer # sync with gmail
    astroid # GUI client for notmuch
)

function install_group {
    name=$1
    shift
    confirm " - \`$name\`?" && yay -S --needed "$@"
}

function setuid_evscript {
    sudo chmod u+s /usr/bin/evscript
}

function configure_rustup {
    rustup install stable
    rustup install nightly && rustup default nightly
    if ls "$HOME/.cargo/bin" | grep -q "cargo-add"; then
        echo "'cargo-add' already installed"
    else
        cargo install cargo-add
    fi
}

function install_pkgs {
    install_group base_shell_pkgs "${base_shell_pkgs[@]}"
    install_group rust_pkgs ${rust_pkgs[@]} && configure_rustup
    install_group wm_pkgs ${wm_pkgs[@]}
    install_group extra_shell_pkgs ${extra_shell_pkgs[@]}
    install_group emacs_pkgs ${emacs_pkgs[@]}
    install_group music_pkgs ${music_pkgs[@]}
    install_group recommended_apps ${recommended_apps[@]}
    install_group gnome_apps ${gnome_apps[@]}
    install_group gtk_theme ${gtk_theme[@]}
    install_group node_pkgs ${node_pkgs[@]}
    install_group python_pkgs ${python_pkgs[@]}
    install_group xorg_pkgs ${xorg_pkgs[@]}
    install_group virtualbox_guest_pkgs ${virtualbox_guest_pkgs[@]}
    install_group bluetooth_pkgs ${bluetooth_pkgs[@]}
    install_group printing_pkgs ${printing_pkgs[@]}
    install_group mail_pkgs ${mail_pkgs[@]}
    confirm " - setuid root the \`evscript\` binary?" && setuid_evscript
    header "Installed all requested packages!"
}

function install_system {
    if pacman -Q | grep -q 'yay'; then
        warn "\`yay\` already installed, using it to install everything else"
    else
        header "Installing \`yay-bin\`"
        # first we want install an AUR helper, so we can install more packages more easily
        mkdir -p $PKG_BUILD_DIR
        cd $PKG_BUILD_DIR

        git clone https://aur.archlinux.org/yay-bin.git
        cd yay-bin
        makepkg -fsri

        header "Using \`yay\` to install everything else"
    fi

    cd ~

    echo ""
    confirm "Install Arch packages?" && install_pkgs
    echo ""
}
